---
import LightLogo from "../images/mk-light.svg";
import { Icon } from "astro-icon";
import Container from './Container.astro';

const menu = [
    {
        name: "Home",
        url: "/"
    },
    {
        name: "Services",
        url: "#",
        submenu: [
            {
                name: "Industrial Scaffolding",
                url: "/industrial-scaffolding"
            },
            {
                name: "Commerical Scaffolding",
                url: "/commercial-scaffolding"
            },
            {
                name: "Domestic Scaffolding",
                url: "/domestic-scaffolding"
            },
            {
                name: "Specialist Scaffolding",
                url: "/specialist-scaffolding"
            }
        ]
    },
    {
        name: "About",
        url: "/about"
    },
    {
        name: "Contact us",
        url: "/contact"
    }
]
---

<header class="relative" id="header">
    <Container>
        <div class="h-16 lg:h-24 xl:h-28 flex items-center justify-between">
            <div class="flex justify-between items-center w-full h-full md:w-auto">
                <a href="">
                    <img src={LightLogo} alt="" class="h-10 lg:h-14 xl:h-16">
                </a>
    
                <button class="md:hidden relative z-50" aria-expanded="false" data-mobile-toggle>
                    <span class="sr-only">Menu</span>
                    <Icon name="fa-solid:bars" size={20} />
                </button>
            </div>
            <nav class="hidden md:flex" id="nav">
                <ul class="flex gap-x-4">
                    {menu.map(({name, url, submenu}) => {
                        return submenu ? (
                            <li class="relative" data-dropdown>
                                <button class="flex py-2 px-4" aria-expanded="false" data-dropdown-toggle>{name}</button>
                                <ul class="absolute right-0 mt-4 origin-top-right shadow-lg bg-white w-max rounded-lg p-4 pointer-events-none opacity-0 transition-all scale-90 space-y-2">
                                    {
                                        submenu.map(item => (
                                            <li><a href={item.url} class="text-sm py-2 px-3 block">{item.name}</a></li>
                                        ))
                                    }
                                </ul>
                            </li>
                        ) : (
                            <li><a href={url} class="flex py-2 px-4">{name}</a></li>
                        )
                    })}
                </ul>
            </nav>
        </div>
    </Container>
    <div class="bg-zinc-100 hidden md:hidden absolute w-full z-[999] text-zinc-800" id="mobile-nav" data-mobile>
        <div class="py-4 px-4 space-y-2">

            {
                menu.map(({name, url, submenu}) => {
                    return submenu ? (
                        <div class="space-y-2" data-dropdown>
                            <a role="button" class="hover:bg-white px-4 py-2 block rounded-xl" aria-expanded="false" data-dropdown-toggle>{name}</a>
                            <div class="hidden space-y-2">
                                {
                                    submenu.map(item => (
                                        <a href={item.url} class="block py-2 px-4 hover:bg-white rounded-xl">{item.name}</a>
                                    ))
                                }                
                            </div>
                        </div>
                    ) : (
                        <a href={url} class="block py-2 hover:bg-white px-4 rounded-xl">{name}</a>
                    )
                })
            }
        </div>


    </div>
</header>

<script>
    "use strict";
    const nav = document.querySelector('#nav');
    const mobileNav : HTMLElement = document.querySelector('[data-mobile]');
    const mobileToggle : HTMLButtonElement = document.querySelector('[data-mobile-toggle]')
    const dropdowns = [...document.querySelectorAll('[data-dropdown] [data-dropdown-toggle]')];

    const openMobile = () => {
        mobileNav.setAttribute('data-mobile', 'open');
        mobileToggle.setAttribute('aria-expanded', 'true');
    }
    const closeMobile = () => {
        mobileNav.setAttribute('data-mobile', '');
        mobileToggle.setAttribute('aria-expanded', 'false');
    }


    mobileToggle.addEventListener('click', (event) => {
        const target = event.currentTarget as HTMLButtonElement;
        if (target.getAttribute("aria-expanded") === "false") {
            openMobile();
        } else {
            closeMobile();
        }
    })
    
    // Set active link
    const setActiveMenuItem = () => {
        const menuItems = [...nav.querySelectorAll('a'), ...mobileNav.querySelectorAll('a')];
        console.log(menuItems)
        menuItems.forEach(menuItem => {
            if (menuItem.pathname === window.location.pathname) {
                menuItem.classList.add('is-active');
                menuItem.setAttribute('aria-current', 'page');
            }
        })
    }
    
    const openDropdown = (dropdownMenu) => {
        dropdownMenu.parentNode.setAttribute('data-dropdown', 'open');
        dropdownMenu.setAttribute('aria-expanded', 'true');
    }

    const closeDropdown = (dropdownMenu) => {
        dropdownMenu.parentNode.setAttribute('data-dropdown', '');
        dropdownMenu.setAttribute('aria-expanded', 'false');
    }

    const closeAllDropdownMenus = () => {
        for (let i = 0; i < dropdowns.length; i++) {
            closeDropdown(dropdowns[i])
        }
    }

    const toggleDropdown = (event) => {
        if (event.target.getAttribute("aria-expanded") === "false") {
            closeAllDropdownMenus()
            openDropdown(event.target)
        } else {
            closeDropdown(event.target)
        }
    }

    dropdowns && dropdowns.forEach(dropdown => {
        dropdown.addEventListener('click', toggleDropdown)
    });
    
    // close all when click outside
    window.addEventListener('click', event => {
        const target = event.target as HTMLElement; // Typescript
        if(!target.hasAttribute('data-dropdown-toggle')) {
            closeAllDropdownMenus()
        }
    });

    setActiveMenuItem();
</script>

<style>
    @media (max-width: 768px) {
        [data-mobile="open"] {
            @apply block;
        }
    }
    #nav [data-dropdown]:has(.is-active) > button,
    #nav a.is-active {
        @apply bg-zinc-100 rounded-lg;
    }
    #nav [data-dropdown="open"] ul {
        @apply pointer-events-auto opacity-100 z-50 scale-100;
    }
    #mobile-nav [data-dropdown="open"] div {
        @apply block;
    }
    #mobile-nav [data-dropdown]:has(.is-active) > a,
    #mobile-nav a.is-active {
        @apply bg-zinc-200;
    }

</style>